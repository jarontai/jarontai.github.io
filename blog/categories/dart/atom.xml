<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dart | Dynamic Static]]></title>
  <link href="http://jarontai.github.io/blog/categories/dart/atom.xml" rel="self"/>
  <link href="http://jarontai.github.io/"/>
  <updated>2016-05-09T16:09:49+08:00</updated>
  <id>http://jarontai.github.io/</id>
  <author>
    <name><![CDATA[JaronTai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular2 Dart快速上手指南]]></title>
    <link href="http://jarontai.github.io/blog/2016/05/08/angular2-dart-quick-start/"/>
    <updated>2016-05-08T09:27:47+08:00</updated>
    <id>http://jarontai.github.io/blog/2016/05/08/angular2-dart-quick-start</id>
    <content type="html"><![CDATA[<p>注：本文翻译的是Angular2快速上手指南的Dart版本，转载请添加本文链接并标明出处。水平有限，仅供参考，更新更全的内容请查看原文：<a href="https://angular.io/docs/dart/latest/quickstart.html">https://angular.io/docs/dart/latest/quickstart.html</a>。</p>

<hr />

<p><br/>
让我们从零开始用Dart来编写一个超级简单的Angular2应用。
（译注：Angular2支持TypeScript，JavaScript与Dart三种语言）</p>

<p>本篇教程假设你已经设置好<a href="https://www.dartlang.org/downloads/">Dart SDK</a>及相关的开发工具。如果你还没有一个合适的编辑器，可以尝试一下拥有Dart插件的<a href="https://confluence.jetbrains.com/display/WI/Getting+started+with+Dart">WebStorm</a>。当然，你也可以去官网的<a href="https://www.dartlang.org/tools/">工具页面</a>下载各种IDE与编辑器的Dart插件。在配置好Dart SDK及你喜欢的开发工具后，再回到这里来。</p>

<h2>准备新应用的目录</h2>

<p>创建一个新文件夹，并在其中新建一个<strong>pubspec.yaml</strong>。(译注：在命令行下执行以下指令)</p>

<pre><code>&gt; mkdir angular2_getting_started
&gt; cd angular2_getting_started
&gt; vim pubspec.yaml  # 这里使用vim，你可以使用任意其他你喜欢的编辑器！
</code></pre>

<p>在<strong>pubspec.yaml</strong>中，指定angular2跟browser作为项目依赖，并对transformer也进行了配置。因为Angular2的API还在变化，所以这里指定了一个版本：2.0.0-beta.17。(译注：指定使用某个版本可以避免多版本间的api冲突)</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">angular2_getting_started</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">QuickStart</span>
</span><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sdk</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;&gt;=1.13.0 &amp;lt;2.0.0&amp;rsquo;</span>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.0.0-beta.17</span>
</span><span class='line'>  <span class="l-Scalar-Plain">browser</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^0.10.0</span>
</span><span class='line'><span class="l-Scalar-Plain">transformers</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">entry_points</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">web/main.dart</span>
</span></code></pre></td></tr></table></div></figure></p>

<!-- more -->


<p>在相同目录下，创建名为web的文件夹，并执行<strong>pub get</strong>安装angular2与browser（以及它们自身的依赖）。</p>

<pre><code>&gt; mkdir web
&gt; pub get
Resolving dependencies...
</code></pre>

<h2>创建一个Dart文件</h2>

<p>在<strong>web</strong>文件夹下创建一个<strong>main.dart</strong>。</p>

<pre><code>&gt; vim web/main.dart  # 这里使用vim，你可以使用任意其他你喜欢的编辑器！
</code></pre>

<p>把以下内容粘贴到<strong>web/main.dart</strong>中：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="kr">package</span><span class="o">:</span><span class="nx">angular2</span><span class="o">/</span><span class="nx">core</span><span class="p">.</span><span class="nx">dart</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="kr">package</span><span class="o">:</span><span class="nx">angular2</span><span class="o">/</span><span class="nx">platform</span><span class="o">/</span><span class="nx">browser</span><span class="p">.</span><span class="nx">dart</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">@</span><span class="nx">Component</span><span class="p">(</span><span class="nx">selector</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">my</span><span class="o">-</span><span class="nx">app</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">template</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">My</span> <span class="nx">First</span> <span class="nx">Angular</span> <span class="mi">2</span> <span class="nx">App</span><span class="o">&lt;</span><span class="err">/h1&gt;&amp;rsquo;)</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">AppComponent</span> <span class="p">{}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bootstrap</span><span class="p">(</span><span class="nx">AppComponent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在以上代码中，你定义了一个Angular2 <strong>component</strong>（译注：组件），它是Angular2最重要的特性之一。组件是创建应用视图的主要方式，当然，它们需要应用逻辑的支持才能工作。</p>

<p>这个组件是个空的，没有做任何事且名称为<strong>AppComponent</strong>的类。在你准备编写一个有实质内容的应用时，你可以为这个组件添加各种属性与相应的应用逻辑。</p>

<p>在这个类上面的是<strong>@Component</strong>注解，它告诉Angular这是一个组件。这里调用了<strong>@Component</strong>的构造函数，此函数有<strong>selector</strong>跟<strong>template</strong>两个命名参数。</p>

<p><strong>selector</strong>参数指定了一个CSS选择器，它标明此组件依附一个名为<strong>my-app</strong>的自定义HTML元素。当Angular遇到一个<strong>my-app</strong>元素时，它就会创建并展示一个<strong>AppComponent</strong>类的实例。</p>

<p><strong>template</strong>参数指定这个组件对应的模板，它告诉Angular如何去渲染视图。在我们的例子中，模板只是一行HTML文本：&#8221;My First Angular 2 App&#8221;。</p>

<p><strong>main()</strong>方法调用了Angular的<strong>bootstrap()</strong>函数，它告诉Angular以<strong>AppComponent</strong>为根元素启动应用。日后，这个应用的根元素上会添加更多的组件，以树状形式不断成长。</p>

<p>最开始的两行代码引入了两个Angular的库，所有使用Angular API的Dart文件都需要引入<strong>core.dart</strong>，而只有调用<strong>bootstrap()</strong>方法的Dart文件才需要引入<strong>platform/browser.dart</strong>。</p>

<h2>创建一个HTML文件</h2>

<p>创建一个名为<strong>web/index.html</strong>的文件并输入以下代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Getting Started<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">&quot;main.dart&quot;</span> <span class="na">type=</span><span class="s">&quot;application/dart&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">&quot;packages/browser/dart.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;my-app&gt;</span>Loading<span class="ni">&amp;hellip;</span><span class="nt">&lt;/my-app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在<strong>&lt;body></strong>中的<strong>my-app</strong>标签就是前面Dart文件中<strong>selector</strong>参数指定的自定义HTML元素。</p>

<h2>运行应用</h2>

<p>你有多种方式来运行你的应用，其中之一是在本地运行一个HTTP服务器并在<a href="https://www.dartlang.org/tools/dartium/">Dartium</a>查看应用。你可以使用任意你喜欢的服务器，比如WebStorm内置的服务器或者Python的SimpleHttpServer。</p>

<p>另外一种方式是通过执行<strong>pub serve</strong>来构建并启动应用，然后你就可以在任意现代浏览器中，通过 <a href="http://localhost:8080">http://localhost:8080</a> 来访问你的应用。<strong>Pub serve</strong>指令会实时的将Dart转换为JavaScript，当然，这会对页面的初次访问造成一定的延迟。</p>

<p>一旦应用运行起来，你就会浏览器窗口中看到 <strong>My First Angular 2 App</strong>。</p>

<p>如果你没有看到，请确保你正确输入了所有的代码并执行过<strong>pub get</strong>。</p>

<h2>生成JavaScript</h2>

<p>在部署你的应用之前，你还需要生成JavaScript文件，<strong>pub build</strong>指令使这项工作得以简单化。为了改善应用的性能，也需要使HTML文件直接引用生成的JavaScript，而这可以由<strong>dart_to_js_script_rewriter</strong>来完成。</p>

<p>将<strong>dart_to_js_script_rewriter</strong>添加到你的<strong>pubsepc.yaml</strong>中，注意<strong>dependencies</strong>跟<strong>transformers</strong>都需要设置。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">angular2_getting_started</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">QuickStart</span>
</span><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sdk</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;&gt;=1.13.0 &amp;lt;2.0.0&amp;rsquo;</span>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.0.0-beta.17</span>
</span><span class='line'>  <span class="l-Scalar-Plain">browser</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^0.10.0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dart_to_js_script_rewriter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^1.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">transformers</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">entry_points</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">web/main.dart</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dart_to_js_script_rewriter</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>然后执行<strong>pub build</strong>，将你的Dart代码编译为JavaScript。</p>

<pre><code>&gt; pub build
Loading source assets...
</code></pre>

<p>生成的JavaScript以及其他支持文件都会出现在<strong>build</strong>文件夹下。</p>

<p>当你为Angular应用生成JavaScript时，请确保使用Angular transformer。它会分析你的代码，将其中使用了反射的代码转换为静态代码，使Dart的构建工具输出更快速、体积更小的JavaScript。<strong>pubspec.yaml</strong>中的高亮部分是对Angular transformer进行配置的，如下所示：(译注：这里高亮的是10、11、12行，笔者暂时没有找到codeblock内部分高亮的方法-_-)</p>

<p><figure class='code'><figcaption><span>mark:1,5-8 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">angular2_getting_started</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">QuickStart</span>
</span><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sdk</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;&gt;=1.13.0 &amp;lt;2.0.0&amp;rsquo;</span>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.0.0-beta.17</span>
</span><span class='line'>  <span class="l-Scalar-Plain">browser</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^0.10.0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">dart_to_js_script_rewriter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^1.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">transformers</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">angular2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">entry_points</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">web/main.dart</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">dart_to_js_script_rewriter</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>entry_points</strong>指定了调用<strong>main()</strong>函数的Dart文件，如果需要查看更多相关信息，请查看<a href="https://github.com/angular/angular/wiki/Angular-2-Dart-Transformer">Angular transformer维基页面</a>。</p>

<blockquote><h4>性能，transformer，以及Angular 2库</h4>

<p>  当你引入<strong>bootstrap.dart</strong>，你就引入了<strong>dart:mirrors</strong>，这是一个反射库，它会对生成的JavaScript性能造成影响。但是别担心，Angular transformer会对你的入口（<strong>pubspec.yaml</strong>中的<strong>entry_points</strong>）执行转换操作，所以它们将不会使用<strong>dart:mirrors</strong>。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart移动开发框架Flutter快速上手指南]]></title>
    <link href="http://jarontai.github.io/blog/2015/09/06/dartlang-flutter-quick-start/"/>
    <updated>2015-09-06T17:05:16+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/09/06/dartlang-flutter-quick-start</id>
    <content type="html"><![CDATA[<p>注意：因为Flutter还处于发展初期，框架跟API在不停迭代，除了<em>开发环境配置</em>等部分，本文的大部分内容已经过时，你可以访问Flutter<a href="http://flutter.io">官网</a>查看最新的教程。</p>

<h3>引言</h3>

<p><a href="http://flutter.io/">Flutter</a>是Chromium项目组与Dart项目组合作开发的一个新的移动应用开发框架，虽然还处于初级阶段（版本号还处于0.0.X），但已经可以拿来写点简单的东西了。本文的内容就是让你了解如何配置flutter的开发环境，并编写一个简单的Hello World。</p>

<h4>注意:</h4>

<ul>
<li>Flutter目前对ios开发的支持还不完善，所以本文将只以android开发来进行讲解。</li>
<li>Flutter的应用打包功能也还没有完善，所以本文暂时不会对此进行讲解。</li>
<li>Flutter目前要求Android 5.0或以上的设备才能进行开发调试，打包的apk最低支持Android 4.0（未确定）。</li>
<li>本文的操作都是在Mac下进行的，大致的流程应该也应该适用于Linux（flutter对Windows的支持将在不久后推出）。</li>
</ul>


<h2>开发环境配置</h2>

<h3>安装 Dart SDK</h3>

<p>在Mac下用<a href="http://brew.sh/">Homebrew</a>，Linux（Debian和Ubuntu）下通过apt-get，都可以方便的安装、升级Dart SDK，具体可以参考我写的文章 - <a href="http://jarontai.github.io/blog/2015/08/21/dart-sdk-auto-installtion/">Dartlang实践：Dart SDK安装指南</a>。安装完成后，先确保在命令行下可以执行dart跟pub这两个指令，然后新建一个环境变量$DART_SDK，并将其指向Dart SDK的安装路径（通过homebrew安装的路径应该是：/usr/local/opt/dart/libexec/）。</p>

<h3>安装 android-platform-tools</h3>

<p>因为是进行android开发，自然需要安装adb（android debug bridge），你可以通过以下指令进行安装（只需要安装adb就可以，不需要完整的Android SDK）：</p>

<!-- more -->


<p>在Mac下使用homebrew安装：</p>

<pre><code>brew install android-platform-tools
</code></pre>

<p>Linux下使用apt-get：</p>

<pre><code>sudo apt-get install android-tools-adb
</code></pre>

<p>安装完成后，必须确保在命令行下可以顺利的访问adb指令。</p>

<h3>准备安卓设备</h3>

<p>准备一台系统版本是5.0或以上的android设备，按照以下指示进行操作：</p>

<ul>
<li>开启开发者选项：进入“设置” > “关于手机”，连续点击“版本号”五次或以上</li>
<li>开启调试：进入“设置” > “开发者选项”，开启“USB调试”</li>
<li>连接电脑：用USB线将设备连接到电脑，手机弹出是否允许电脑调试对话框，选择允许</li>
</ul>


<h2>Hello World</h2>

<p>准备工作完成，现在正式开始编写代码。新建一个hello_world文件夹，并在其下创建一个文件pubspec.yaml，它的内容如下：</p>

<pre><code>name: hello_world
dependencies:
  flutter: "&gt;=0.0.6 &lt;0.1.0"
dev_dependencies:
  sky_tools: any
</code></pre>

<p>在项目文件夹下创建一个lib文件夹，然后在终端中进入项目根目录，执行pub get指令下载依赖，完成之后，项目的文件夹结构应该是类似于这样的：</p>

<pre><code>hello_world
  .pub
  .packages
  packages
  lib
  pubspec.lock
  pubspec.yaml
</code></pre>

<p>Flutter默认将lib/main.dart作为应用的入口文件，所以我们在lib文件夹下新建一个main.dart，并敲入以下代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">import</span> <span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nl">package:</span><span class="n">flutter</span><span class="o">/</span><span class="n">material</span><span class="p">.</span><span class="n">dart</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">HelloWorldApp</span> <span class="kd">extends</span> <span class="n">StatelessComponent</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">build</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Center</span><span class="p">(</span>
</span><span class='line'>        <span class="nl">child:</span> <span class="k">new</span> <span class="n">Text</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">!&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>            <span class="nl">style:</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">TextStyle</span><span class="p">(</span><span class="nl">color:</span> <span class="k">new</span> <span class="n">Color</span><span class="p">(</span><span class="mh">0xFF01FFFF</span><span class="p">),</span> <span class="nl">fontSize:</span> <span class="m">25.0</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">runApp</span><span class="p">(</span><span class="k">new</span> <span class="n">HelloWorldApp</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在我们的main方法中，一个HelloWorldApp组件被实例化，然后传入runApp方法中运行。HelloWorldApp的代码很简单，它构建了一个在屏幕居中显示的，指定了色彩跟文字大小的HelloWorld文本。如果你想学习更多有关widget的知识，请查看官方的<a href="https://flutter.io/tutorial/">widget tutorial</a>。</p>

<h2>运行</h2>

<p>要运行调试我们编写的代码，必须先通过pub激活flutter。</p>

<p>进入命令行，执行以下指令：</p>

<pre><code>pub global activate flutter
</code></pre>

<p>此指令将指示pub下载flutter并将其置为全局可见。</p>

<p>进入项目目录，执行：</p>

<pre><code>flutter start
</code></pre>

<p>此指令将在设备上安装一个专门用于调试运行flutter应用的工具-SkyShell.apk，并把当前文件夹下的代码上传到SkyShell中运行。</p>

<p>如果你想让dart代码运行在checked模式，你可以这样：</p>

<pre><code>flutter start --checked
</code></pre>

<p>如果你想查看错误日志以及print函数所打印的信息，你可以另开一个终端执行：</p>

<pre><code>flutter logs
</code></pre>

<p>当然，也可以把指令合并起来执行：</p>

<pre><code>flutter start --checked &amp;&amp; flutter logs
</code></pre>

<p>另外，如果不想一次次手动执行start指令，你可以这样（类似于web前端开发里面的livereload，只要文件一被修改，应用自动重新加载）：</p>

<pre><code>flutter listen
</code></pre>

<h2>效果</h2>

<p>检验成果的时候到了，运行效果如下：</p>

<p>  <img src="/images/custom/dart/sky/hello_world.png" />
  <img src="/images/custom/dart/sky/hello_world_landscape.png" /></p>

<p>运行效果没有什么惊喜，毕竟只是一个HelloWorld，等以后再写点更复杂的应用吧。</p>

<h2>结语</h2>

<p>虽然很多方面都还有待完善，但从整个Hello World的开发体验来讲，我个人认为，flutter比传统的android开发有了很大进步，它将很多web开发的“先进”理念带到了原生应用开发中，让人有“耳目一新”的感觉，希望flutter能够快速的成长起来，成为未来移动开发的中坚力量。</p>

<p>以上。</p>

<hr />

<h3>更新记录</h3>

<ol>
<li>2015.09.14 更改部分文字，更新官方的widget tutorial</li>
<li>2015.09.24 注明Sky的版本</li>
<li>2015.10.19 Sky => Flutter</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dartlang实践：Dart SDK安装指南]]></title>
    <link href="http://jarontai.github.io/blog/2015/08/21/dart-sdk-auto-installtion/"/>
    <updated>2015-08-21T14:24:01+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/08/21/dart-sdk-auto-installtion</id>
    <content type="html"><![CDATA[<p>本文讲解了如何在Mac/Windows/Linux上自动化安装Dart SDK，适合初次接触dartlang的开发者。如果你需要手动下载安装，请访问 - <a href="https://www.dartlang.org/downloads/archive/">https://www.dartlang.org/downloads/archive/</a> 。</p>

<p>注意：因为安装过程中需要访问google的资源站点，请确保你能够访问google（科学上网）。</p>

<h2>Mac</h2>

<p>个人认为Mac是从事dartlang开发的最佳平台，mac上的<a href="http://brew.sh/">homebrew</a>又几乎是开发人员的标配，所以我们这里使用homebrew来安装Dart SDK。</p>

<h3>安装</h3>

<p>用homebrew安装Dart SDK是小菜一碟，你只要在终端中运行以下指令：</p>

<pre><code>$ brew tap dart-lang/dart
$ brew install dart
</code></pre>

<p>如果是web开发者，你可能需要dartium（可以直接运行Dart的Chromium）, 那你可以这样：</p>

<pre><code>$ brew tap dart-lang/dart
$ brew install dart --with-dartium
</code></pre>

<!-- more -->


<p>如果你想安装开发版本（dev channel）的Dart SDK，请添加 &ndash;devel</p>

<pre><code>$ brew install dart --devel
</code></pre>

<h3>升级</h3>

<p>使用homebrew安装了Dart SDK后，更新升级也变得非常简单：</p>

<pre><code>$ brew update
$ brew upgrade dart
$ brew upgrade dart --devel
</code></pre>

<h3>注意</h3>

<p>在使用WebStorm或其他编辑器时，你可能需要知道Dart SDK的确切地址，你可以使用以下指令来查看相关信息：</p>

<pre><code>$ brew info dart
</code></pre>

<p>信息如下：</p>

<pre><code>dart-lang/dart/dart: stable 1.11.3, devel 1.12.0-dev.5.8
https://www.dartlang.org/
/usr/local/Cellar/dart/1.12.0-dev.5.0 (228 files, 34M)
  Built from source
/usr/local/Cellar/dart/1.12.0-dev.5.8 (267 files, 37M) *
  Built from source
From: https://github.com/dart-lang/homebrew-dart/blob/master/dart.rb
==&gt; Options
--with-content-shell
    Download and install content_shell -- headless Dartium for testing
--with-dartium
    Download and install Dartium -- Chromium with Dart
--devel
    Install development version 1.12.0-dev.5.8
==&gt; Caveats
Please note the path to the Dart SDK:
  /usr/local/opt/dart/libexec

--with-dartium:
  To use with IntelliJ, set the Dartium execute home to:
    /usr/local/opt/dart/Chromium.app
</code></pre>

<h2>Windows</h2>

<p>Windows下有一个类似于homebrew的包管理器 - <a href="https://chocolatey.org/">chocolatey</a>，通过它来安装Dart SDK也很简单。</p>

<p>在安装好chocolatey后，只要运行一条指令即可完成安装。以下指令将安装最新版本的Dart SDK与Dartium：</p>

<pre><code>choco install dart-sdk
choco install dartium
</code></pre>

<p>更新也是一条指令：</p>

<pre><code>choco upgrade dart-sdk
choco upgrade dartium
</code></pre>

<p>请访问chocolatey的<a href="https://chocolatey.org/packages/dart-sdk/">dart-sdk</a>与<a href="https://chocolatey.org/packages/dartium/">dartium</a>包页面以获取更多的信息，
更多的chocolatey指令，请查看：<a href="https://github.com/chocolatey/choco/wiki/CommandsReference">https://github.com/chocolatey/choco/wiki/CommandsReference</a></p>

<h2>Linux</h2>

<p>如果你使用的是Ubuntu/Debian，通过apt-get可以很方便的安装Dart SDK。</p>

<h3>设置源</h3>

<p>稳定版本</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install apt-transport-https
$ sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
$ sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list &gt; /etc/apt/sources.list.d/dart_stable.list'
$ sudo apt-get update
</code></pre>

<p>开发版本（替换前面的第四步）</p>

<pre><code>$ sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_unstable.list &gt; /etc/apt/sources.list.d/dart_unstable.list'
</code></pre>

<h3>安装</h3>

<p>以下指令将安装当前可获取的最高版本的Dart SDK：</p>

<pre><code>$ sudo apt-get install dart
</code></pre>

<p>如果你同时设置了稳定版本跟开发版本，那以上指令将一直安装开发版本，因为开发版本的版本号肯定高于稳定版本。</p>

<h3>安装特定版本</h3>

<p>如果你同时设置了稳定版本跟开发版本，但是又想安装稳定版本，那你需要执行：</p>

<pre><code>$ sudo apt-get install dart/stable
</code></pre>

<p>如果你想安装某个特定版本，那你可以这样：</p>

<pre><code>$ sudo apt-get install dart=1.5.8-1
$ sudo apt-get install dart=1.6.*
$ sudo apt-get install dart=1.7.0-dev.0.1.*
</code></pre>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dartlang学习笔记：变量、内置类型、函数和操作符]]></title>
    <link href="http://jarontai.github.io/blog/2015/06/20/dart-notes-2/"/>
    <updated>2015-06-20T10:53:00+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/06/20/dart-notes-2</id>
    <content type="html"><![CDATA[<p>  这是Dart学习笔记的第二篇，主要记录变量、内置类型和函数的一些重要知识点。</p>

<h2>变量</h2>

<p>  Dart的变量都是引用（reference），它们都指向一个对象。变量可以指定类型，也可以不指定（使用var）。不管任何类型的变量，只要没有对它进行初始化，它都将被赋予null。</p>

<p>  如果某个变量的值不会被更改，请用final或者const来修饰它。Final与const的区别：被final修饰的变量只能被初始化一次，但其所指对象还可以被修改；而const表示当前变量是“编译时常量”，它所指的对象在创建后不能再修改。</p>

<p>  示例如下：
  <img src="/images/custom/dart_notes/note2/variables.png" /><!-- more --></p>

<h2>内置类型</h2>

<p>  Dart的内置类型包括：number，string，boolean，list，map，symbol。内置类型的变量，都可以用字面量来初始化，或使用特有的构造函数来构造（如：Map）。</p>

<p>  Number类型其实有两种：int（整形）跟double（双精度浮点数），它们都是num（数字）的子类型。</p>

<p>  String（字符串）在Dart中是一串不可变的，以UTF-16编码的字符序列。一般使用单引号或双引号来创建字符串，也可以用+号来连接它们，还能使用字符串插值来避免过多的字符串连接操作。</p>

<p>  Boolean类型在Dart里面是用bool表示，它有两个值：true跟false。需要注意的是，在JavaScript等语言中，非空字符串、非零数字等能被转换为true；而在Dart中，true就是true，其他任何值都视为false！</p>

<p>  List类型，在其他语言中常被称为array（数组），是最常见最常用的一种集合类型，它提供了很多易用的方法来处理数组数据。</p>

<p>  Map类型，可以看成是由键值对组成的对象，它的字面量表示方式以及操作方法都跟JavaScript的json对象类似。</p>

<p>  Symbol类型比较特殊，日常编码很少用到它。它是一种标识符，它在Dart代码被最小化（minification）时不会被修改，它的表示方式就是在普通标识符前面加上一个#。</p>

<p>  示例如下：
  <img src="/images/custom/dart_notes/note2/types.png" /></p>

<h2>函数</h2>

<p>  Dart的函数是对象，跟变量一样，可以指定函数返回类型，也可以不指定。Dart的函数也支持两种形式的可选参数：可选命名参数跟可选位置参数。它还支持 => 简写方式，前提是函数的body只包含一个表达式（注意语句与表达式的区别）。</p>

<p>  所有Dart应用都应该有一个顶层main函数，它用来作为程序执行的入口。Main函数的返回值是void，它的参数是可选的位置参数 ‘List&lt;String&gt;’。</p>

<p>  Dart的函数是一等公民，它可以作为变量在代码间到处传递，也可以像JavaScript样通过嵌套来实现闭包。每一个函数都有返回值，如果没有显式的返回语句，则默认在函数body结束前添加 ‘return null;’。</p>

<p>  示例如下：
  <img src="/images/custom/dart_notes/note2/function.png" /></p>

<h2>操作符</h2>

<p>  Dart的操作符大部分跟JavaScript的是一样的，并且大部分是可以被重载（override）。</p>

<p>  Dart也提供了一类特殊的操作符-类型检测操作符，它们是：as，is，is!。其中，as用来进行类型转换，is与is!用来判断对象的类型。</p>

<p>  示例如下：
  <img src="/images/custom/dart_notes/note2/operators.png" /></p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dartlang学习笔记：Dartlang的重要概念]]></title>
    <link href="http://jarontai.github.io/blog/2015/06/06/dart-notes-1/"/>
    <updated>2015-06-06T20:50:39+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/06/06/dart-notes-1</id>
    <content type="html"><![CDATA[<p>  因为最近工作比较忙，对Dart的学习也是断断续续，积累下来的东西不多，还是写点学习笔记吧。今天先来第一篇，记录一下Dartlang的一些重要概念（或者说区别于其他编程语言的一些特性，这里主要使用Java与JavaScript来作些对比）。</p>

<h3>Dart能在前端/后端运行</h3>

<p>  Dart代码是通过dart2js编译成JavaScript在浏览器上运行的，它的标准库包含专门处理HTML的dart:hmtl库，在应用层也有Polymer.dart、AngularDart这样的web框架（Angular2也将支持Dart），通过它们，你可以方便的编写web应用。另一方面，通过DartVM，Dart也能运行在服务端，虽然这样使用的人可能不多，但凭借易用的标准库以及逐渐丰富的第三方库，用Dart来开发中小型命令行应用还是绰绰有余的。</p>

<h3>&ldquo;真正的面向对象&rdquo;</h3>

<p>  在谈到面向对象的编程语言时，Java经常被人提起，但其实Java并非“真正的面向对象”，因为它的基本数据类型都不是对象。而在Dart中，“一切皆对象”。Dart的类都继承自Object类，所有的变量都指向一个对象，数字、函数甚至null本身也是一个对象，所有未被初始化的变量也都被赋予null，可以说Dart才是一门“真正面向对象”的编程语言。示例如下：<!-- more --></p>

<p>  <img src="/images/custom/dart_notes/note1/everything_is_object.png" /></p>

<h3>类型是可选的</h3>

<p>  Dart的类型，似乎是Java跟JavaScript类型系统的结合。你不想使用类型时，可以用var声明变量，这样你就可以像写JavaScript一样自由的书写代码。反过来，你也可以像Java一样，为每个变量都指定类型，这就使得编辑器能对代码进行静态检查，如果你把数字赋给了一个String类型的变量，编辑器就会有警告信息提示你。示例如下：</p>

<p>  <img src="/images/custom/dart_notes/note1/optional_types.png" /></p>

<h3>函数是一等公民</h3>

<p>  跟JavaScript类似，Dart的函数是对象，你可以定义顶层函数，或是把函数存放到变量里面，又或是通过函数嵌套来实现闭包。示例如下：</p>

<p>  <img src="/images/custom/dart_notes/note1/function_is_good.png" /></p>

<h3>库与可见性</h3>

<p>  Dart的库（library）初看可能有点像Java的包（package），但其实它们非常不同。Dart的library是一个或多个dart文件，一个dart文件内可以包含多个变量、函数与类。而Java的包是一个文件夹，其中包含多个java文件，一个java文件只能包含一个public类。在可见性方面，Dart不像Java那样拥有public、private等访问控制符，它的设计非常简洁：以library为单位，所有变量、函数、类等对外默认都是可见的，只有在它们的标志符以下划线开头的情况下，它们才变为私有的，对外不可见。</p>

<h3>运行模式</h3>

<p>  Dart运行时（runtime）有两种运行模式：production与checked。Production是默认模式，它对运行速度进行了优化，但是也关闭了类型检查以及断言（assert）。Checked模式则相反，它打开了断言与类型检查，但运行速度就比不过production。具体来说，如果你把数字赋给了一个String类型的变量，在checked模式下运行会抛出异常，但是在production模式下则不会。所以，开发时建议使用checked模式，在生产环境下才使用production模式。</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
