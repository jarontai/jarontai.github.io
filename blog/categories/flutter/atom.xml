<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flutter | Dynamic Static]]></title>
  <link href="http://jarontai.github.io/blog/categories/flutter/atom.xml" rel="self"/>
  <link href="http://jarontai.github.io/"/>
  <updated>2016-01-14T19:56:46+08:00</updated>
  <id>http://jarontai.github.io/</id>
  <author>
    <name><![CDATA[戴虬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dart移动开发框架Flutter快速上手指南]]></title>
    <link href="http://jarontai.github.io/blog/2015/09/06/dartlang-flutter-quick-start/"/>
    <updated>2015-09-06T17:05:16+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/09/06/dartlang-flutter-quick-start</id>
    <content type="html"><![CDATA[<p>注意：因为Flutter还处于发展初期，框架跟API在不停迭代，除了<em>开发环境配置</em>等部分，本文的大部分内容已经过时，你可以访问Flutter<a href="http://flutter.io">官网</a>查看最新的教程。</p>

<h3>引言</h3>

<p><a href="http://flutter.io/">Flutter</a>是Chromium项目组与Dart项目组合作开发的一个新的移动应用开发框架，虽然还处于初级阶段（版本号还处于0.0.X），但已经可以拿来写点简单的东西了。本文的内容就是让你了解如何配置flutter的开发环境，并编写一个简单的Hello World。</p>

<h4>注意:</h4>

<ul>
<li>Flutter目前对ios开发的支持还不完善，所以本文将只以android开发来进行讲解。</li>
<li>Flutter的应用打包功能也还没有完善，所以本文暂时不会对此进行讲解。</li>
<li>Flutter目前要求Android 5.0或以上的设备才能进行开发调试，打包的apk最低支持Android 4.0（未确定）。</li>
<li>本文的操作都是在Mac下进行的，大致的流程应该也应该适用于Linux（flutter对Windows的支持将在不久后推出）。</li>
</ul>


<h2>开发环境配置</h2>

<h3>安装 Dart SDK</h3>

<p>在Mac下用<a href="http://brew.sh/">Homebrew</a>，Linux（Debian和Ubuntu）下通过apt-get，都可以方便的安装、升级Dart SDK，具体可以参考我写的文章 - <a href="http://jarontai.github.io/blog/2015/08/21/dart-sdk-auto-installtion/">Dartlang实践：Dart SDK安装指南</a>。安装完成后，先确保在命令行下可以执行dart跟pub这两个指令，然后新建一个环境变量$DART_SDK，并将其指向Dart SDK的安装路径（通过homebrew安装的路径应该是：/usr/local/opt/dart/libexec/）。</p>

<h3>安装 android-platform-tools</h3>

<p>因为是进行android开发，自然需要安装adb（android debug bridge），你可以通过以下指令进行安装（只需要安装adb就可以，不需要完整的Android SDK）：</p>

<!-- more -->


<p>在Mac下使用homebrew安装：</p>

<pre><code>brew install android-platform-tools
</code></pre>

<p>Linux下使用apt-get：</p>

<pre><code>sudo apt-get install android-tools-adb
</code></pre>

<p>安装完成后，必须确保在命令行下可以顺利的访问adb指令。</p>

<h3>准备安卓设备</h3>

<p>准备一台系统版本是5.0或以上的android设备，按照以下指示进行操作：</p>

<ul>
<li>开启开发者选项：进入“设置” > “关于手机”，连续点击“版本号”五次或以上</li>
<li>开启调试：进入“设置” > “开发者选项”，开启“USB调试”</li>
<li>连接电脑：用USB线将设备连接到电脑，手机弹出是否允许电脑调试对话框，选择允许</li>
</ul>


<h2>Hello World</h2>

<p>准备工作完成，现在正式开始编写代码。新建一个hello_world文件夹，并在其下创建一个文件pubspec.yaml，它的内容如下：</p>

<pre><code>name: hello_world
dependencies:
  flutter: "&gt;=0.0.6 &lt;0.1.0"
dev_dependencies:
  sky_tools: any
</code></pre>

<p>在项目文件夹下创建一个lib文件夹，然后在终端中进入项目根目录，执行pub get指令下载依赖，完成之后，项目的文件夹结构应该是类似于这样的：</p>

<pre><code>hello_world
  .pub
  .packages
  packages
  lib
  pubspec.lock
  pubspec.yaml
</code></pre>

<p>Flutter默认将lib/main.dart作为应用的入口文件，所以我们在lib文件夹下新建一个main.dart，并敲入以下代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">import</span> <span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nl">package:</span><span class="n">flutter</span><span class="o">/</span><span class="n">material</span><span class="p">.</span><span class="n">dart</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">HelloWorldApp</span> <span class="kd">extends</span> <span class="n">StatelessComponent</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">build</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Center</span><span class="p">(</span>
</span><span class='line'>        <span class="nl">child:</span> <span class="k">new</span> <span class="n">Text</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">!&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>            <span class="nl">style:</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">TextStyle</span><span class="p">(</span><span class="nl">color:</span> <span class="k">new</span> <span class="n">Color</span><span class="p">(</span><span class="mh">0xFF01FFFF</span><span class="p">),</span> <span class="nl">fontSize:</span> <span class="m">25.0</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">runApp</span><span class="p">(</span><span class="k">new</span> <span class="n">HelloWorldApp</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在我们的main方法中，一个HelloWorldApp组件被实例化，然后传入runApp方法中运行。HelloWorldApp的代码很简单，它构建了一个在屏幕居中显示的，指定了色彩跟文字大小的HelloWorld文本。如果你想学习更多有关widget的知识，请查看官方的<a href="https://flutter.io/tutorial/">widget tutorial</a>。</p>

<h2>运行</h2>

<p>要运行调试我们编写的代码，必须先通过pub激活flutter。</p>

<p>进入命令行，执行以下指令：</p>

<pre><code>pub global activate flutter
</code></pre>

<p>此指令将指示pub下载flutter并将其置为全局可见。</p>

<p>进入项目目录，执行：</p>

<pre><code>flutter start
</code></pre>

<p>此指令将在设备上安装一个专门用于调试运行flutter应用的工具-SkyShell.apk，并把当前文件夹下的代码上传到SkyShell中运行。</p>

<p>如果你想让dart代码运行在checked模式，你可以这样：</p>

<pre><code>flutter start --checked
</code></pre>

<p>如果你想查看错误日志以及print函数所打印的信息，你可以另开一个终端执行：</p>

<pre><code>flutter logs
</code></pre>

<p>当然，也可以把指令合并起来执行：</p>

<pre><code>flutter start --checked &amp;&amp; flutter logs
</code></pre>

<p>另外，如果不想一次次手动执行start指令，你可以这样（类似于web前端开发里面的livereload，只要文件一被修改，应用自动重新加载）：</p>

<pre><code>flutter listen
</code></pre>

<h2>效果</h2>

<p>检验成果的时候到了，运行效果如下：</p>

<p>  <img src="/images/custom/dart/sky/hello_world.png" />
  <img src="/images/custom/dart/sky/hello_world_landscape.png" /></p>

<p>运行效果没有什么惊喜，毕竟只是一个HelloWorld，等以后再写点更复杂的应用吧。</p>

<h2>结语</h2>

<p>虽然很多方面都还有待完善，但从整个Hello World的开发体验来讲，我个人认为，flutter比传统的android开发有了很大进步，它将很多web开发的“先进”理念带到了原生应用开发中，让人有“耳目一新”的感觉，希望flutter能够快速的成长起来，成为未来移动开发的中坚力量。</p>

<p>以上。</p>

<hr />

<h3>更新记录</h3>

<ol>
<li>2015.09.14 更改部分文字，更新官方的widget tutorial</li>
<li>2015.09.24 注明Sky的版本</li>
<li>2015.10.19 Sky => Flutter</li>
</ol>

]]></content>
  </entry>
  
</feed>
