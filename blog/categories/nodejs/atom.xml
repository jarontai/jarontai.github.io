<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | Dynamic Static]]></title>
  <link href="http://jarontai.github.io/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://jarontai.github.io/"/>
  <updated>2016-08-13T08:12:10+08:00</updated>
  <id>http://jarontai.github.io/</id>
  <author>
    <name><![CDATA[JaronTai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js实践：读取Excel，查询MySQL]]></title>
    <link href="http://jarontai.github.io/blog/2015/01/13/nodejs-xlsx-and-mysql/"/>
    <updated>2015-01-13T09:10:55+08:00</updated>
    <id>http://jarontai.github.io/blog/2015/01/13/nodejs-xlsx-and-mysql</id>
    <content type="html"><![CDATA[<p>  注意：本文假设你对JavaScript异步编程，Node.js，MySQL数据库等有基本的了解。本文中大部分操作都是基于Mac OS的终端（Windows环境推荐使用Git附带的<a href="https://msysgit.github.io/">Git Bash</a>）。</p>

<h3>需求</h3>

<p>  假设有个小需求：提供一个Excel文件（xlsx格式），其中含了用户数据，你需要查询MySQL数据库，把其中没有验证邮箱的用户给筛选出来。</p>

<p>  Excel数据格式如下（第一行为标题）：<br>
  <img src="{{ root_url }}/images/custom/20150113/excel-data.png" /></p>

<p>  数据库用户表（users）关键字段：username, email_activation（0表示未激活，1表示已激活）
  <img src="{{ root_url }}/images/custom/20150113/database.png" /></p>

<h3>准备</h3>

<p>  为了应对这个任务，我们使用了三个package，分别是：<a href="https://www.npmjs.com/package/xlsx">xlsx</a>, <a href="https://www.npmjs.com/package/mysql">mysql</a>, <a href="https://www.npmjs.com/package/async">async</a>。从它们的名字可以看出它们各自的功能，xlsx负责读写xlsx文件，mysql负责连接查询数据库，async则用来简化异步代码。
  <!-- more --></p>

<p>  新建一个项目文件夹member_filter，进入后执行npm init，简单填写项目信息，然后安装我们需要的三个依赖：npm install xlsx mysql async &ndash;save</p>

<p>  <img src="{{ root_url }}/images/custom/20150113/setup1.png" />
  <img src="{{ root_url }}/images/custom/20150113/setup2.png" /></p>

<h3>编码</h3>

<p>  代码的思路：读取xlsx文件里面的用户数据，对其进行适当的转换处理，然后再用这些数据去MySQL数据库查询，得到邮箱没有被激活的用户并将它们打印出来。</p>

<p>{% codeblock lang:js %}
// 导入依赖
var xlsx = require(&lsquo;xlsx&rsquo;);
var async = require(&lsquo;async&rsquo;);
var mysql = require(&lsquo;mysql&rsquo;);</p>

<p>// 读取xlsx文件，将第一个worksheet转换成json对象
var workbook = xlsx.readFile(&lsquo;test.xlsx&rsquo;);
var sheetNameList = workbook.SheetNames;
var worksheet = workbook.Sheets[sheetNameList[0]];
var userArray = xlsx.utils.sheet_to_json(worksheet); // 转换为JSON对象数组，第一行数据默认作为对象的key值</p>

<p>// 连接MySQL
var connection = mysql.createConnection({
  host     : &lsquo;localhost&rsquo;,
  user     : &lsquo;root&rsquo;,
  password : &lsquo;root&rsquo;,
  database : &lsquo;test&rsquo;
});
connection.connect();</p>

<p>// 通过async遍历用户对象数组，循环异步查询MySQL，检查email是否激活
var sql1 = &lsquo;SELECT 1 FROM users WHERE username = &rsquo;;
var sql2 = &lsquo; AND email_activation = 1&rsquo;;
var counter = 0;
var key = &lsquo;账号&rsquo;;
async.eachSeries(userArray, function(obj, callback) {
  var username = obj[key];
  if (username) {
    var selectSql = sql1 + &lsquo;\&rsquo;&lsquo; + username + &rsquo;\&lsquo;&rsquo; + sql2; // 拼接查询语句
    connection.query(selectSql, function(err, rows) {
      if (err) {
        callback(err);
      } else {
        // 如果rows对象为空，则表示当前查询结果为空即email未激活
        if (!rows || !rows[0]) {
          counter++;
          console.log(&lsquo;&rsquo;+counter, username);
        }
        callback();
      }
    });
  } else {
    callback();
  }
}, function(err) {
  // 打印错误，关闭数据库连接
  if (err) {
    console.log(&lsquo;Error: &rsquo;, JSON.stringify(err));  <br/>
  }
  connection.end();
});
{% endcodeblock %}</p>

<p>关键代码讲解：</p>

<ul>
<li>第7~10行：先获取workbook的第一个sheetName，然后通过sheetName获取到worksheet，然后通过xlsx的utils.sheet_to_json方法将worksheet转换成JSON对象数组（第一行的标题将作为对象的key值）</li>
<li>第13~19行：将数据库的连接配置传入mysql提供的createConnection方法，创建数据库连接</li>
<li>第22~44行：通过async.eachSeries方法遍历用户JSON数组，通过mysql连接提供的query方法异步查询数据库</li>
<li>第45~51行：在async.eachSeries遍历结束后，打印错误信息并关闭MySQL连接</li>
</ul>


<h3>运行效果</h3>

<p>  <img src="{{ root_url }}/images/custom/20150113/result.png" /></p>

<p>关于xlsx，mysql以及async的详细用法，请到npmjs网站上去搜索查看：<a href="https://www.npmjs.com/">npmjs</a></p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用cnpm镜像服务]]></title>
    <link href="http://jarontai.github.io/blog/2014/05/19/use-cnpm/"/>
    <updated>2014-05-19T12:38:39+08:00</updated>
    <id>http://jarontai.github.io/blog/2014/05/19/use-cnpm</id>
    <content type="html"><![CDATA[<p>  因为node/npm的服务器是在国外，而我大天朝的网络又是如此‘给力‘，所以在使用npm install安装依赖的过程中，经常会卡住；我不得不频繁的使用Ctrl+C中止下载，然后再尝试n次才能搞定。在google良久并尝试诸多方法之后，发现使用cnpm应该是应对此问题的最佳方案（当然能用VPN最好）。</p>

<p>  <!-- more --></p>

<p>  <a href="http://cnpmjs.org/">cnpm</a>的全称是Company npm，本意是指公司内部的npm，你可以使用它快速方便的搭建企业内部私有npm。此外，它还提供了一个公共的npm的镜像服务(<a href="http://r.cnpmjs.org">http://r.cnpmjs.org</a>)，你可以使用它来代替官方的npm。</p>

<p>  使用cnpm的镜像服务主要有两种方式，第一种是指定npm的registry参数，使npm去镜像地址下载依赖；第二种方式是使用cnpm提供的客户端来代替npm，即直接使用cnpm指令来安装/更新依赖。我个人更喜欢第二种方式，因为它不需要每次都写registry参数，也不用修改npm本身的配置，非常方便。</p>

<p>  第一种方式
{% codeblock lang:sh %}
// 添加registry参数指向镜像地址
npm install -g cordova &ndash;registry=<a href="http://r.cnpmjs.org">http://r.cnpmjs.org</a></p>

<p>// 或者直接修改registry配置，默认的地址是<a href="https://registry.npmjs.org/%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%BA%86npm%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%89">https://registry.npmjs.org/%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%BA%86npm%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%89</a>
npm config set registry <a href="http://r.cnpmjs.org">http://r.cnpmjs.org</a>
{% endcodeblock %}</p>

<p>  第二种方式
{% codeblock lang:sh %}
// 安装cnpm客户端
npm install -g cnpm &ndash;registry=<a href="http://r.cnpmjs.org">http://r.cnpmjs.org</a></p>

<p>// 使用cnpm代替npm（npm依然可用）
cnpm install -g lodash <br/>
cnpm update -g lodash
cnpm uninstall -g lodash
cnpm cache clean
&hellip;&hellip;
{% endcodeblock %}</p>

<p> 使用cnpm安装依赖包，安装速度及成功率比以前使用npm时要高很多了，这可真要感谢cnpm的维护者们。</p>
]]></content>
  </entry>
  
</feed>
