<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 翻译 | Dynamic Static]]></title>
  <link href="http://jarontai.github.io/blog/categories/fan-yi/atom.xml" rel="self"/>
  <link href="http://jarontai.github.io/"/>
  <updated>2015-01-15T15:28:28+08:00</updated>
  <id>http://jarontai.github.io/</id>
  <author>
    <name><![CDATA[戴虬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dartlang译文：Dart快速入门]]></title>
    <link href="http://jarontai.github.io/blog/2014/12/18/translation-dart-quick-start/"/>
    <updated>2014-12-18T12:07:36+08:00</updated>
    <id>http://jarontai.github.io/blog/2014/12/18/translation-dart-quick-start</id>
    <content type="html"><![CDATA[<p>  译注：本文是博主的原创翻译，转载请添加本文链接并标明出处。本文翻译的是Google Dart项目组撰写的《Dart：Up and Running》的第一章。文中存在一些新近出现、暂无标准翻译的技术向词语，已使用星号做了标注，在文章尾部附注可以查看它们的原文。博主的语文跟英语都是学渣级别，如有翻译不妥或错误之处请多见谅。水平有限，本文仅作参考。</p>

<hr />

<p><br/>
  欢迎你来学习Dart！Dart是一个开源、高效的（*1），用于构建HTML5 web应用的开发平台。本文将告诉你为什么Google要创造Dart，Dart有哪些酷炫的特性，以及如何编写、运行你的第一个Dart应用。</p>

<p>  Dart不仅是一门新的语言，它还有内置标准库（*2）、编辑器、虚拟机（VM）、能直接运行Dart的浏览器以及一个将其编译为JavaScript的编译器。Dart立志成为一个更加高效的web开发工具，用于开发满足用户需求的高性能现代应用。</p>

<h3>为什么Google要创造Dart</h3>

<p>  Google始终致力于使Web变得更好。我们（译者注：指Google，下同）编写了很多web应用，它们大都异常复杂，如：Gmail，Google Calendar，Google+等。我们希望web应用能快速加载、运行流畅、有趣而富有吸引力。我们想让不同知识背景的开发者都能够在浏览器上创建高质量的应用。<!-- more --></p>

<p>  Google Chrome - 作为Google对web的贡献之一，是Google在web平台停滞不前的时期创造的。它成功了！如下图所示，从2008年Chrome诞生开始，浏览器的速度得到了极大的提升。</p>

<p>  注意：Chrome之所以能提供高速的web浏览体验，大都归功于它的JavaScript引擎 - V8。而现在，许多V8的工程师都投入到了Dart项目中。
  <img src="/images/custom/dart/chrome_browser_speed.png" /></p>

<p>  浏览器的新特性也在不断增加，比如：WebGL，FileSystem，Webworkers以及WebSockets等。浏览器已经具备自动更新能力，能够及时地向用户推送新的特性跟补丁。移动设备如平板电脑跟手机，也拥有了支持大部分HTML5特性的现代浏览器。</p>

<p>  虽然web平台有着上述非常多的改进，但开发者的体验却没有随之而改善。我们认为，构建大型、复杂的web应用，本不应该像现在那么麻烦的。趁手的web开发工具来的太慢，并且它们还远落后于其他开发平台。其实，你不应该非得熟练掌握web编程，才能开始为现代web开发应用的。还有就是，虽然JavaScript引擎变得越来越快，但web应用的启动还是很慢。</p>

<p>  我们希望Dart能在以下两个方面改善web开发：</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 更好的性能：作为虚拟机工程师，Dart的设计者知道怎样构建一门高性能的语言。一个结构更严密的语言，更容易进行优化；而一个全新的虚拟机，也使得许多改进成为可能，比如：更快的启动速度。</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 更好的效率：对库及包的支持，使开发人员更容易与他人协作，更容易在不同项目共享代码。类型使得API更加清晰与易用。配套的工具也能帮助你检索、重构、调试代码。</p>

<h3>Dart初探</h3>

<p>  闻名不如见面，以下是一小段Dart代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">dart</span><span class="o">:</span><span class="nx">math</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">Point</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">num</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">Point</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">num</span> <span class="nx">distanceTo</span><span class="p">(</span><span class="nx">Point</span> <span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">other</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">other</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sqrt</span><span class="p">(</span><span class="nx">dx</span> <span class="o">*</span> <span class="nx">dx</span> <span class="o">+</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">dy</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">print</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">distance</span> <span class="nx">from</span> <span class="nx">p</span> <span class="nx">to</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">$</span><span class="p">{</span><span class="nx">p</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">q</span><span class="p">)}</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>  当然，Dart的主要使用场景是编写现代web应用，为浏览器编程也很简单：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">dart</span><span class="o">:</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ButtonElement</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">button</span><span class="p">..</span><span class="nx">id</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">confirm</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'>        <span class="p">..</span><span class="nx">text</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Click</span> <span class="nx">to</span> <span class="nx">Confirm</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'>        <span class="p">..</span><span class="nx">classes</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">important</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="p">..</span><span class="nx">onClick</span><span class="p">.</span><span class="nx">listen</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Confirmed</span><span class="o">!&amp;</span><span class="nx">rsquo</span><span class="p">;));</span>
</span><span class='line'>  <span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">registration</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">children</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">button</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>  你将在第二章及第三章，更详细的学习Dart语言及它的标准库。（译者注：这里是指《Dart：Up and Running》的第二、三章）</p>

<h3>Dart的酷炫特性</h3>

<p>  Dart的代码看起来似曾相识，但请不要被迷惑。Dart提供了许多新的特性，使你能更加高效的、充满乐趣的去构建下一代web应用。</p>

<p>  Dart简单易学，大批的开发者都可以快速学习它。它不仅有着熟悉的语法，还是一门拥有类、单继承、词法作用域、顶层函数等诸多特性的面向对象语言。大部分开发者在数小时内就可以上手。</p>

<p>  Dart会被编译成JavaScript。为了使Dart兼容种类繁多的现代浏览器，Dart在最开始就被设计成能够编译为JavaScript的。Dart的每个特性，在被加入之前，都经过慎重考虑，因为必须确保它们能被编译成高效的、符合逻辑的JavaScript代码。当然，Dart也有自己的底线，它不支持老土、过时的浏览器。</p>

<p>  Dart可以运行在客户端和服务器上。Dart虚拟机不仅能集成在浏览器中，还能够独立运行在命令行之上。Dart内置的标准库覆盖了文件、文件夹、套接字甚至web服务器等各个方面，你完全可以使用Dart来开发完全端到端（*2）的应用。</p>

<p>  Dart提供一个轻量的编辑器 - Dart Editor。你可以使用它来编写、运行以及调试Dart应用。Dart Editor提供代码自动完成、检测隐藏Bug、调试命令行及web应用，乃至重构等诸多功能。Dart Editor并不是编写Dart应用的必需品，它只是让你能更快更好的进行编码。（译者注：WebStorm、Sublime Text等都有Dart插件）</p>

<p>  Dart支持类型，但不强制使用。当你想进行快速开发，或者代码的结构还没有确定，又或者你觉得现有类型无法满足你的需求，你都可以省略类型。当你的应用开始成形，代码的结构变得清晰，其他开发者也慢慢加入，你就可以给代码添加类型了。Dart的可选类型是静态类型的注解，能够作为代码注释，清晰的表达你的意图。使用类型意味着你能节省不少代码注释，而开发工具也能提供更好的警告与错误信息。</p>

<p>  Dart能胜任小至简单脚本，大到复杂应用。Web开发其实是一个迭代的过程。有浏览器的重新加载按钮充当编译器，编写web应用原型只需要你编写几个函数就搞定了，这在某种程度上成了一种乐趣。当你的想法更加成熟时，就可以添加更多的代码与逻辑。得益于Dart对顶层函数、可选类型、类与库的支持，你的应用可以不断成长。代码不断进化，而Dart Editor这样的工具，可以帮助你对它们进行检查、重构。</p>

<p>  Dart有非常多的内置标致库。核心库支持内置类型以及其他基础特性，如：集合、日期及正则表达式等。HTML库则用来编写web应用，它像我们熟悉的DOM编程，只是为Dart做了优化。命令行应用可以使用I/O库来操作文件、文件夹、套接字、服务器等等。其他库还包括了URI、UTF、Crypto、Math以及Unit test等。</p>

<p>  Dart使用isolates（*3）来支持安全而简便的并发编程。传统的线程是共享内存的，它们难于调试并可能导致死锁。而Dart的isolates，受Erlang的启发，使用了一个更简单易懂的模式来运行并发且被隔离的代码。isolates的创建过程低耗、快速，而且没有状态信息被共享。</p>

<p>  Dart支持代码共享与复用。传统的web开发不能方便的整合第三方代码。使用Dart的包管理器（pub）和库等特性，你可以轻松的搜索、安装、集成来自互联网及其他公司的代码。</p>

<p>  Dart是开源的。Dart是为web而生的，它使用类似BSD的协议。你可以在线查看Dart项目的<a href="https://code.google.com/p/dart/">源码以及Bug</a>。或许你下次可以提交一个补丁呢？</p>

<h3>走起（*4）</h3>

<p>  现在你应该对Dart有了大概的了解，是时候写代码了。以下的操作都是使用开源的编辑器Dart Editor。当你下载Dart时，你不仅拥有了Dart Editor，还获得了Dart转JavaScript编译器，以及一个内置了Dart虚拟机的定制版Chromium（昵称为Dartium）。</p>

<p>  注意：如果在安装使用Dart Editor时碰到问题，请查看<a href="https://www.dartlang.org/tools/editor/troubleshoot.html">Dart Editor故障排查</a>。</p>

<h4>步骤1：下载安装软件包</h4>

<p>  在此步骤中，你将安装Dart Editor。如果你没有安装Java，就还要安装Java运行环境。（如果你不想修改环境变量，你可以把JRE直接放到你的Dart安装目录下，注意文件夹名称必须是jre）</p>

<ol>
<li><a href="https://www.dartlang.org/tools/download.html">下载Dart与Dart Editor</a></li>
<li>将你下载的文件解压，得到一个文件夹，我们把它称为Dart的安装目录。这个文件夹里面包含了Dart Editor执行文件以及其他子文件夹。</li>
<li>如果你没有安装Java，请去下载并安装它。Dart Editor需要Java 6或以上的版本才能运行。</li>
</ol>


<h4>步骤2：启动编辑器</h4>

<p>  进入Dart安装目录，双击DartEditor执行文件<img src="/images/custom/dart/dart_logo.png" />。</p>

<p>  你应该会看到Dart Editor的应用窗口被打开，就像下面这张图一样：
  <img src="/images/custom/dart/dart_editor_open.png" /></p>

<h4>步骤3：运行demo</h4>

<p>  Dart Editor附带了不少demo。在此步骤中，你将打开一个web应用，并让它在Dartium中运行。</p>

<ol>
<li>点击<strong>Welcome</strong>选项卡，或是从<strong>Tools</strong>菜单中选择<strong>Welcome Page</strong>。</li>
<li>进入Welecome选项卡，点击标题为<strong>Sunflower</strong>的图片。Dart Editor将会创建一份<a href="https://github.com/dart-lang/sample-sunflower">Sunflower app</a>的拷贝，编辑区则会显示web/sunflower.dart文件的内容。</li>
<li>点击Run按钮<img src="/images/custom/dart/run_button.png" />。Dart Editor会打开Dartium，并使其加载sunflower.html文件。（<strong>注意</strong>：Dartium还处于技术预览期，它在安全性与稳定性方面，存在一定的问题，所以请不要使用Dartium作为你的主要浏览器。）</li>
<li>使用页面上的滑块来改变太阳花的形状，如下图：
<img src="/images/custom/dart/slider_sunflower.png" /></li>
</ol>


<h4>步骤4：创建并运行一个应用</h4>

<p>  从头开始创建一个简单的web或命令行应用是非常简单的。以下步骤将带你创建运行一个命令行应用：</p>

<ol>
<li>点击新建应用按钮<img src="/images/custom/dart/app_new_button.png" />（它位于Dart Editor的左上角），或者是选择<strong>File > New Application</strong>菜单项，又或者是点击<strong>Welcome</strong>选项卡里面的<strong>Create an Application&hellip;</strong>按钮。一个对话框将会弹出（参见下图）。</li>
<li>填写应用的名称，比如：hello_world。如果你不喜欢默认保存路径，请填写一个新的路径或者选择一个新的目录。</li>
<li>请确保<strong>Generate sample content</strong>与<strong>Command-line application</strong>是被选中的。然后点击<strong>Finish</strong>，完成新建过程。</li>
</ol>


<p>  <img src="/images/custom/dart/app_new_dialog.png" /></p>

<p>  默认创建的Dart文件将在编辑区被打开，它所在文件夹也显示在文件视图区。此时，你的Dart Editor应该类似于下图：</p>

<p>  <img src="/images/custom/dart/app_init.png" /></p>

<p>4.点击Run按钮<img src="/images/custom/dart/run_button.png" />运行你新编写的应用。对命令行应用来说，print()函数产生的输出将展现在Dart Editor的底部右侧，位于<strong>Problems</strong>选项卡旁边的某个选项卡中。</p>

<p>译文结束。</p>

<hr />

<p><br/>
附注：<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*1 batteries-included <-> 高效的 (无奈翻译)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*2 libraries <-> 标准库 (根据上下文，此处应该不是泛指，而是特指Dart内置的标准库)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*3 full end-to-end <-> 完全端到端 (无知翻译)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*4 isolates (未翻译)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*5 up and running <-> 走起 (逗比翻译)</p>

<hr />

<p><br/>
本文地址：<a href="http://jarontai.github.io/blog/2014/12/18/translation-dart-quick-start/">http://jarontai.github.io/blog/2014/12/18/translation-dart-quick-start/</a><br/>
原文地址：<a href="https://www.dartlang.org/docs/dart-up-and-running/ch01.html">https://www.dartlang.org/docs/dart-up-and-running/ch01.html</a></p>
]]></content>
  </entry>
  
</feed>
